% AMATH 482 - Homework 1
% Khrisna Kamarga
clear all; close all; clc;

load Testdata % load the ultrasound data

% set up the fourier coefficients
L = 15; % spatial domain
n = 64; % Fourier modes
x2 = linspace(-L,L,n+1); x = x2(1:n); y = x; z = x;
k = (2*pi/(2*L))*[0:(n/2-1) -n/2:-1]; ks = fftshift(k);
% set up the 3D coordinate points
[X,Y,Z] = meshgrid(x,y,z); % spatial coordinates
[Kx,Ky,Kz] = meshgrid(ks,ks,ks); % wave numbers
[kx, ky, kz] = meshgrid(k,k,k); % unshifted wave numbers
Klim = max(Kx, [], 'all') + 1; % limits of the frequency domain axes

realize = 20; % amount of data points

%% plot the data given

for j = 1:realize
    Un(:,:,:) = reshape(Undata(j,:),n,n,n);
    close all, isosurface(X,Y,Z,abs(Un),0.4)
    axis([-20 20 -20 20 -20 20]), grid on, drawnow
end

%%
% 1) Through averaging of the spectrum, determine the frequency signature
%    center frequency) generated by the marble.

UtnAve = zeros(n,n,n); % kernel for the averaged frequency domain signal
for j = 1:realize
    Un(:,:,:) = reshape(Undata(j,:),n,n,n); % gets the 3D coordinate representation of the sample
    Utn = fftn(Un); % fourier transform of the data
    UtnAve = UtnAve + Utn; % cummulative sum of the frequency domain signal
end

% plot the resulting normalized averaged data in the frequency domain
isosurface(Kx, Ky, Kz, abs(fftshift(UtnAve))/max(abs(UtnAve), [], 'all'), 0.6);
xlabel("Kx"); ylabel("Ky"); zlabel("Kz");
title("Averaged Data in the Frequency Domain");
axis([-Klim Klim -Klim Klim -Klim Klim]), grid on, drawnow
% find the indices of the max magnitude in the frequency domain
[ind1 ind2 ind3] = ind2sub([n,n,n], find(fftshift(UtnAve) == max(fftshift(UtnAve), [], 'all')));
% look up the frequency domain coordinate of the strongest signal
Kc = [Kx(ind1, ind2, ind3), Ky(ind1, ind2, ind3), Kz(ind1, ind2, ind3)];

pause

% 3D gaussian filter
tau = 2; % bandwith of the filter (good: 0.2)
filter = exp(-tau*((kx - Kc(1)).^2+(ky - Kc(2)).^2+(kz - Kc(3)).^2));

% plot the filter
isosurface(Kx,Ky,Kz,fftshift(abs(filter))/max(abs(filter), [], 'all'),0.2)

pause

% 2) Filter the data around the center frequency determined above in order
%    to denoise the data and determinethe path of the marble.
%    (use plot3 to plot the path once you have it)

close all;

marble = zeros(realize, 3); % kernel for the coordinates of the marble
for j = 1:realize
    Un(:,:,:) = reshape(Undata(j,:),n,n,n);
    Utn = fftn(Un); %Utn = fftshift(Utn);
    UtnFilter = Utn.*filter; % filtered frequency domain signal
    UnFilter = real(ifftn(UtnFilter)); % obtain the spatial filtered data
    
    % draw the resulting spatial filtered data
    isosurface(X,Y,Z,abs(UnFilter)/max(abs(UnFilter), [], 'all'),0.8)
    axis([-L L -L L -L L]), grid on, drawnow
    
    % find the coordinate of the center of the marble
    [ind1 ind2 ind3] = ind2sub([n,n,n], find(abs(UnFilter) == max(abs(UnFilter), [], 'all')));
    marble(j,:) = [X(ind1, ind2, ind3), Y(ind1, ind2, ind3), Z(ind1, ind2, ind3)];
    xlabel("X"); ylabel("Y"); zlabel("Z");
    pause(0.2);
end

pause

% plot the trajectory of the marble
plot3(marble(:,1), marble(:,2), marble(:,3), 'm.-', 'MarkerSize', 20);
xlim([-L L]); ylim([-L L]); zlim([-L L]);
title("Trajectory of the Marble");
xlabel("X"); ylabel("Y"); zlabel("Z");
grid on

% 3) Where should an intense acoustic wave be focused to breakup the 
%    marble at the 20th data measurement.

acoustic_wave = marble(end,:) % Fluffy lives!

pause

hold on
plot3(acoustic_wave(1), acoustic_wave(2), acoustic_wave(3), 'r.', 'MarkerSize', 50)